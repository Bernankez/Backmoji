---
import Demo from "@/components/Demo.astro";

const code = `import { backmoji, createImageRenderer } from "backmoji";
import Avatar from "/avatar.png";

const parent = document.querySelector<HTMLDivElement>("#image-pattern")!;

function loadImage() {
  return new Promise<HTMLImageElement>((resolve) => {
    const image = document.createElement("img");
    image.onload = () => {
      resolve(image);
    };
    image.src = Avatar;
    image.width = 200;
    image.height = 200;
  });
}

const img = await loadImage();

const renderer = createImageRenderer(img, {
  custom({ ctx, item, renderItemWidth, renderItemHeight, rowGap, columnGap, columnCount, rowCount }) {
    for (let rowIndex = 0; rowIndex < rowCount; rowIndex++) {
      let from: number, to: number;
      if (rowIndex % 2 === 0) {
        from = -2;
        to = columnCount;
      } else {
        from = 0;
        to = columnCount + 2;
      }
      for (let columnIndex = from; columnIndex < to; columnIndex++) {
        const x = columnIndex * (renderItemWidth + columnGap);
        const y = rowIndex * (renderItemHeight + rowGap);
        if ((columnIndex - rowIndex) % 2 === 0) {
          ctx.drawImage(item, x, y, renderItemWidth, renderItemHeight);
        }
      }
    }
  },
});

const height = 300;
const { canvas, render, setSize } = backmoji(renderer, {
  degree: -30,
  rowGap: 50,
  columnGap: 60,
  width: parent.clientWidth,
  height,
});

const observer = new ResizeObserver((entries) => {
  for (const entry of entries) {
    setSize(entry.contentRect.width, height);
    render();
  }
});
observer.observe(parent);

parent.appendChild(canvas);
render();`;
---

<Demo code={code} lang="ts">
  <div id="image-pattern" class="h-full w-full overflow-hidden rounded-md bg-orange-50"></div>
</Demo>

<script>
import { backmoji, createImageRenderer } from "backmoji";
import Avatar from '/avatar.png?url'

const parent = document.querySelector<HTMLDivElement>("#image-pattern")!;

function loadImage() {
  return new Promise<HTMLImageElement>(resolve => {
    const image = document.createElement("img");
    image.onload = () => {
      resolve(image);
    }
    image.src = Avatar;
    image.width = 200;
    image.height = 200;
  })
}

const img = await loadImage();

const renderer = createImageRenderer(img, {
  custom({ ctx, item, renderItemWidth, renderItemHeight, rowGap, columnGap, columnCount, rowCount }) {
    for (let rowIndex = 0; rowIndex < rowCount; rowIndex++) {
      let from: number, to: number;
      if (rowIndex % 2 === 0) {
        from = -2;
        to = columnCount;
      } else {
        from = 0;
        to = columnCount + 2;
      }
      for (let columnIndex = from; columnIndex < to; columnIndex++) {
        const x = columnIndex * (renderItemWidth + columnGap);
        const y = rowIndex * (renderItemHeight + rowGap);
        if ((columnIndex - rowIndex) % 2 === 0) {
          ctx.drawImage(item, x, y, renderItemWidth, renderItemHeight)
        }
      }
    }
  },
});

const height = 300;
const { canvas, render, setSize } = backmoji(renderer, {
  degree: -30,
  rowGap: 50,
  columnGap: 60,
  width: parent.clientWidth,
  height,
});

const observer = new ResizeObserver((entries) => {
  for(const entry of entries){
    setSize(entry.contentRect.width, height);
    render();
  }
})
observer.observe(parent)

parent.appendChild(canvas);
render();
</script>
